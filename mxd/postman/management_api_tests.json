{
	"info": {
		"_postman_id": "e2aebd59-90e7-46f5-bd35-cd131baeddab",
		"name": "Management API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34215553"
	},
	"item": [
		{
			"name": "Post Contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Post Content\", function () {\r",
							"     pm.collectionVariables.set('CONTENT_ID', pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{JSON_CONTENT}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BACKEND_SERVICE}}/api/v1/contents"
			},
			"response": []
		},
		{
			"name": "Create Asset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Asset Created\", function () {",
							"    var jsonData = pm.response.json();",
							"    var expectedId = pm.collectionVariables.get(\"ASSET_ID\");",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {},\n  \"@id\": \"{{ASSET_ID}}\",\n  \"properties\": {\n    \"description\": \"Product EDC Demo Asset\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"HttpData\",\n    \"baseUrl\": \"{{BACKEND_SERVICE_PROTOCOL}}/api/v1/contents/{{CONTENT_ID}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{PROVIDER_MANAGEMENT_URL}}/v3/assets"
			},
			"response": []
		},
		{
			"name": "Get Asset by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Asset by ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = pm.collectionVariables.get(\"ASSET_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{PROVIDER_MANAGEMENT_URL}}/v3/assets/{{ASSET_ID}}"
			},
			"response": []
		},
		{
			"name": "Create Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Policy Created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = pm.collectionVariables.get(\"POLICY_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@type\": \"PolicyDefinitionRequestDto\",\n  \"@id\": \"{{POLICY_ID}}\",\n  \"policy\": {\n    \"@type\": \"odrl:Set\",\n    \"odrl:permission\": [\n      {\n        \"odrl:action\": \"USE\",\n        \"odrl:constraint\": {\n          \"@type\": \"LogicalConstraint\",\n          \"odrl:or\": [\n            {\n              \"@type\": \"Constraint\",\n              \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:eq\"\n              },\n              \"odrl:rightOperand\": \"{{CONSUMER_ID}}\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{PROVIDER_MANAGEMENT_URL}}/v3/policydefinitions"
			},
			"response": []
		},
		{
			"name": "Get Policies by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get Policy by ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = pm.collectionVariables.get(\"POLICY_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{PROVIDER_MANAGEMENT_URL}}/v3/policydefinitions/{{POLICY_ID}}"
			},
			"response": []
		},
		{
			"name": "Create Contract Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Contract Definition Created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = pm.collectionVariables.get(\"CONTRACT_DEFINITION_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {},\n  \"@id\": \"{{CONTRACT_DEFINITION_ID}}\",\n  \"@type\": \"ContractDefinition\",\n  \"accessPolicyId\": \"{{POLICY_ID}}\",\n  \"contractPolicyId\": \"{{POLICY_ID}}\",\n  \"assetsSelector\": {\n    \"@type\": \"CriterionDto\",\n    \"operandLeft\": \"{{EDC_NAMESPACE}}id\",\n    \"operator\": \"=\",\n    \"operandRight\": \"{{ASSET_ID}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{PROVIDER_MANAGEMENT_URL}}/v3/contractdefinitions"
			},
			"response": []
		},
		{
			"name": "Get Contract Definitiion by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get Contract Definition by ID\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"   var expectedId = pm.collectionVariables.get(\"CONTRACT_DEFINITION_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{PROVIDER_MANAGEMENT_URL}}/v3/contractdefinitions/{{CONTRACT_DEFINITION_ID}}"
			},
			"response": []
		},
		{
			"name": "Query Catalog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Query Catalog \", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"   var offer = jsonData['dcat:dataset'].find(dataset => dataset[\"@id\"] === pm.collectionVariables.get(\"ASSET_ID\"));",
							"    pm.expect(offer).to.not.be.null;",
							"    pm.collectionVariables.set(\"OFFER_ID\", offer[\"odrl:hasPolicy\"][\"@id\"]);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"@context\": {\r\n    \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\"\r\n  },\r\n  \"@type\": \"CatalogRequest\",\r\n  \"counterPartyAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\r\n  \"protocol\": \"dataspace-protocol-http\",\r\n  \"querySpec\": {\r\n    \"offset\": 0,\r\n    \"limit\": 50\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{CONSUMER_MANAGEMENT_URL}}/v3/catalog/request"
			},
			"response": []
		},
		{
			"name": "Initiate Negotation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test(\"Initiated Negotiation\", function () {",
							"  pm.collectionVariables.set(\"NEGOTIATION_ID\", jsonData[\"@id\"]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@type\": \"NegotiationInitiateRequestDto\",\n  \"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n  \"protocol\": \"dataspace-protocol-http\",\n  \"connectorId\": \"{{PROVIDER_ID}}\",\n  \"providerId\": \"{{PROVIDER_ID}}\",\n  \"offer\": {\n    \"offerId\": \"{{OFFER_ID}}\",\n    \"assetId\": \"{{ASSET_ID}}\",\n    \"policy\": {\n      \"@type\": \"odrl:Set\",\n      \"odrl:permission\": {\n        \"odrl:target\": \"{{ASSET_ID}}\",\n        \"odrl:action\": {\n          \"odrl:type\": \"USE\"\n        },\n        \"odrl:constraint\": {\n          \"odrl:or\": {\n            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n            \"odrl:operator\": {\n              \"@id\": \"odrl:eq\"\n            },\n            \"odrl:rightOperand\": \"{{CONSUMER_ID}}\"\n          }\n        }\n      },\n      \"odrl:prohibition\": [],\n      \"odrl:obligation\": [],\n      \"odrl:target\": \"{{ASSET_ID}}\"\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{CONSUMER_MANAGEMENT_URL}}/v3/contractnegotiations"
			},
			"response": []
		},
		{
			"name": "Get Negotations By ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const API_KEY_HEADER = 'X-Api-Key';\r",
							"const URL=`${pm.collectionVariables.get(\"CONSUMER_MANAGEMENT_URL\")}/v3/contractnegotiations/${pm.collectionVariables.get(\"NEGOTIATION_ID\")}/state`;\r",
							"function delay(ms) {\r",
							"  return new Promise(resolve => setTimeout(resolve, ms));\r",
							"}\r",
							"\r",
							"async function makeRequests() {\r",
							"  for (let i = 0; i < 10; i++) {\r",
							"    const response = await new Promise(resolve => {\r",
							"      pm.sendRequest({\r",
							"        url: URL,\r",
							"        method: 'GET',\r",
							"        header: {\r",
							"          ...pm.request.headers.toObject(),\r",
							"          [API_KEY_HEADER]: pm.collectionVariables.get(\"API_KEY_PASSWORD\"),\r",
							"        },\r",
							"      }, (error, response) => {\r",
							"        resolve(response);\r",
							"      });\r",
							"    });\r",
							"\r",
							"    var data = response.json();\r",
							"    if (data[\"state\"] === \"FINALIZED\") {\r",
							"      break;\r",
							"    }\r",
							"    else {\r",
							"      await delay(500);\r",
							"    }\r",
							"  }\r",
							"}\r",
							"makeRequests();\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Get Negotiation \", function () {\r",
							"   pm.expect(jsonData[\"state\"]).to.eql(\"FINALIZED\");\r",
							"   pm.collectionVariables.set(\"CONTRACT_AGREEMENT_ID\", jsonData[\"contractAgreementId\"]);\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{CONSUMER_MANAGEMENT_URL}}/v3/contractnegotiations/{{NEGOTIATION_ID}}"
			},
			"response": []
		},
		{
			"name": "Initiate Transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test(\"Initiated Transfer \" , function () {",
							"  pm.collectionVariables.set(\"TRANSFER_ID\", jsonData[\"@id\"]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"assetId\": \"{{ASSET_ID}}\",\n  \"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n  \"connectorId\": \"{{PROVIDER_ID}}\",\n  \"contractId\": \"{{CONTRACT_AGREEMENT_ID}}\",\n  \"dataDestination\": {\n    \"type\": \"HttpData-PULL\"\n  },\n  \"privateProperties\": {\n    \"receiverHttpEndpoint\": \"{{BACKEND_SERVICE_PROTOCOL}}/api/v1/transfers\"\n  },\n  \"protocol\": \"dataspace-protocol-http\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{CONSUMER_MANAGEMENT_URL}}/v3/transferprocesses"
			},
			"response": []
		},
		{
			"name": "Get Transfer by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const API_KEY_HEADER = 'X-Api-Key';\r",
							"const URL=`${pm.collectionVariables.get(\"CONSUMER_MANAGEMENT_URL\")}/v3/transferprocesses/${pm.collectionVariables.get(\"TRANSFER_ID\")}/state`;\r",
							"function delay(ms) {\r",
							"  return new Promise(resolve => setTimeout(resolve, ms));\r",
							"}\r",
							"\r",
							"async function makeRequests() {\r",
							"  for (let i = 0; i < 10; i++) {\r",
							"    const response = await new Promise(resolve => {\r",
							"      pm.sendRequest({\r",
							"        url: URL,\r",
							"        method: 'GET',\r",
							"        header: {\r",
							"          ...pm.request.headers.toObject(),\r",
							"          [API_KEY_HEADER]: pm.collectionVariables.get(\"API_KEY_PASSWORD\"),\r",
							"        },\r",
							"      }, (error, response) => {\r",
							"        resolve(response);\r",
							"      });\r",
							"    });\r",
							"\r",
							"    var data = response.json();\r",
							"    if (data[\"state\"] === \"STARTED\") {\r",
							"      break;\r",
							"    }\r",
							"    else {\r",
							"      await delay(500);\r",
							"    }\r",
							"  }\r",
							"}\r",
							"makeRequests();\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Get Transfer \", function () {\r",
							" pm.expect(jsonData[\"state\"]).to.eql(\"STARTED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{CONSUMER_MANAGEMENT_URL}}/v3/transferprocesses/{{TRANSFER_ID}}"
			},
			"response": []
		},
		{
			"name": "Validate Transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var expected = JSON.stringify(JSON.parse(pm.collectionVariables.get('JSON_CONTENT')));\r",
							"var actual =  JSON.stringify(pm.response.json());\r",
							"\r",
							"pm.test('Validation Transfer ', () => {\r",
							"    pm.expect(expected).to.eql(actual);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BACKEND_SERVICE}}/api/v1/transfers/{{TRANSFER_ID}}/contents"
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"value": "{{API_KEY_PASSWORD}}",
			"key": "X-Api-Key"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CONSUMER_MANAGEMENT_URL",
			"value": "http://localhost/bob/management"
		},
		{
			"key": "PROVIDER_PROTOCOL_URL",
			"value": "http://alice-controlplane:8084/api/v1/dsp"
		},
		{
			"key": "PROVIDER_MANAGEMENT_URL",
			"value": "http://localhost/alice/management"
		},
		{
			"key": "ASSET_ID",
			"value": "200",
			"type": "default"
		},
		{
			"key": "POLICY_ID",
			"value": "200",
			"type": "default"
		},
		{
			"key": "CONTRACT_DEFINITION_ID",
			"value": "200",
			"type": "default"
		},
		{
			"key": "CONSUMER_ID",
			"value": "BPNL000000000002",
			"type": "default"
		},
		{
			"key": "PROVIDER_ID",
			"value": "BPNL000000000001",
			"type": "string"
		},
		{
			"key": "EDC_NAMESPACE",
			"value": "https://w3id.org/edc/v0.0.1/ns/",
			"type": "string"
		},
		{
			"key": "API_KEY_PASSWORD",
			"value": "password",
			"type": "string"
		},
		{
			"key": "BACKEND_SERVICE",
			"value": "http://localhost/backend-service",
			"type": "string"
		},
		{
			"key": "BACKEND_SERVICE_PROTOCOL",
			"value": "http://backend-service:8080",
			"type": "string"
		},
		{
			"key": "JSON_CONTENT",
			"value": "{\"userId\": 918704604,\"title\": \"agwng\",\"text\": \"oz\"}"
		},
		{
			"key": "CONTENT_ID",
			"value": ""
		},
		{
			"key": "OFFER_ID",
			"value": ""
		},
		{
			"key": "NEGOTIATION_ID",
			"value": ""
		},
		{
			"key": "TRANSFER_ID",
			"value": ""
		},
		{
			"key": "CONTRACT_AGREEMENT_ID",
			"value": ""
		}
	]
}