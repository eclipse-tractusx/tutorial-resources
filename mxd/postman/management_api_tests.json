{
	"info": {
		"_postman_id": "fcffd254-e40a-4c7d-b9fb-d7ea516b7d75",
		"name": "tractusx-edc-mgmt-api-final-with-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31550443"
	},
	"item": [
		{
			"name": "Create Asset Alice to Bob",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Asessts Created for BOB\", function () {",
							"   var jsonData = pm.response.json();",
							"   var expectedId = \"100003\";",
							"   console.log(\"expected Id : \"+expectedId);",
							"   console.log(\"acctual Id  : \"+jsonData[\"@id\"]);",
							"   pm.expect(jsonData[\"@id\"]).to.eql(expectedId)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {},\n    \"@id\": \"{{ASSET_ID}}\", \n    \"properties\": {\n        \"description\": \"Product EDC Demo Asset\"\n    },\n    \"dataAddress\": {\n        \"@type\": \"DataAddress\",\n        \"type\": \"HttpData\",\n        \"baseUrl\": \"http://localhost:8080/api/v1/contents/1\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v3/assets",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v3",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Asset Bob to Alice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Asessts Created for BOB\", function () {",
							"   var jsonData = pm.response.json();",
							"   var expectedId = \"100003\";",
							"   console.log(\"expected Id : \"+expectedId);",
							"   console.log(\"acctual Id  : \"+jsonData[\"@id\"]);",
							"   pm.expect(jsonData[\"@id\"]).to.eql(expectedId)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {},\n    \"@id\": \"{{ASSET_ID}}\", \n    \"properties\": {\n        \"description\": \"Product EDC Demo Asset\"\n    },\n    \"dataAddress\": {\n        \"@type\": \"DataAddress\",\n        \"type\": \"HttpData\",\n        \"baseUrl\": \"http://localhost:8080/api/v1/contents/1\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CONSUMER_MANAGEMENT_URL}}/v3/assets",
					"host": [
						"{{CONSUMER_MANAGEMENT_URL}}"
					],
					"path": [
						"v3",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Assets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var expectedId = \"100003\";\r",
							"pm.test(\"Recored is matched with expcedId : \"+expectedId, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							" \r",
							"    let status = false;\r",
							"    jsonData.forEach((item) => {\r",
							"        if (item[\"@id\"] == expectedId) {\r",
							"            // Check if the item has the expected @id\r",
							"            pm.expect(item[\"@id\"]).to.eql(expectedId);\r",
							"            status = true;\r",
							"        }\r",
							"    });\r",
							"\r",
							"    // If status is still false, it means no match was found\r",
							"    if (!status) {\r",
							"        pm.expect.fail('Failed : No any record matched with expectedId : '+expectedId);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v3/assets/request",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v3",
						"assets",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Policy Alice to Bob",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Asessts Created for BOB\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   var expectedId = \"200003\";\r",
							"   console.log(\"expected Id : \"+expectedId);\r",
							"   console.log(\"acctual Id  : \"+jsonData[\"@id\"]);\r",
							"   pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"{{POLICY_ID}}\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\"odrl:or\" : [{\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"{{POLICY_BPN}}\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/policydefinitions",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"policydefinitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Policy Bob to Alice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Asessts Created for BOB\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   var expectedId = \"200003\";\r",
							"   console.log(\"expected Id : \"+expectedId);\r",
							"   console.log(\"acctual Id  : \"+jsonData[\"@id\"]);\r",
							"   pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"{{POLICY_ID}}\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\"odrl:or\" : [{\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"{{POLICY_BPN}}\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CONSUMER_MANAGEMENT_URL}}/v2/policydefinitions",
					"host": [
						"{{CONSUMER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"policydefinitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Policies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var expectedId = \"200003\";\r",
							"pm.test(\"Recored is matched with expcedId : \"+expectedId, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    let status = false;\r",
							"    jsonData.forEach((item) => {\r",
							"        if (item[\"@id\"] == expectedId) {\r",
							"            // Check if the item has the expected @id\r",
							"            pm.expect(item[\"@id\"]).to.eql(expectedId);\r",
							"            status = true;\r",
							"        }\r",
							"    });\r",
							"\r",
							"    // If status is still false, it means no match was found\r",
							"    if (!status) {\r",
							"        pm.expect.fail('Failed : No any record matched with expectedId : '+expectedId);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"id\": \"{{POLICY_ID}}\",\n    \"policy\": {\n        \"prohibitions\": [],\n        \"obligations\": [],\n        \"permissions\": [\n            {\n                \"edctype\": \"dataspaceconnector:permission\",\n                \"action\": {\n                    \"type\": \"USE\"\n                },\n                \"constraints\": []\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/policydefinitions/request",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"policydefinitions",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Contract Definitiion Alice to Bob",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Contract Definition Created for BOB\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   var expectedId = \"300003\";\r",
							"   console.log(\"expected Id : \"+expectedId);\r",
							"   console.log(\"acctual Id  : \"+jsonData[\"@id\"]);\r",
							"   pm.expect(jsonData[\"@id\"]).to.eql(expectedId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {},\n    \"@id\": \"{{CONTRACT_DEFINITION_ID}}\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"{{ACCESS_POLICY_ID}}\",\n    \"contractPolicyId\": \"{{CONTRACT_POLICY_ID}}\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"{{EDC_NAMESPACE}}id\",\n        \"operator\": \"=\",\n        \"operandRight\": \"{{ASSET_ID}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/contractdefinitions",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"contractdefinitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Contract Definitiion Bob to Alice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Contract Definition Created for BOB\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   var expectedId = \"300003\";\r",
							"   console.log(\"expected Id : \"+expectedId);\r",
							"   console.log(\"acctual Id  : \"+jsonData[\"@id\"]);\r",
							"   pm.expect(jsonData[\"@id\"]).to.eql(expectedId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@context\": {},\n    \"@id\": \"{{CONTRACT_DEFINITION_ID}}\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"{{ACCESS_POLICY_ID}}\",\n    \"contractPolicyId\": \"{{CONTRACT_POLICY_ID}}\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"{{EDC_NAMESPACE}}id\",\n        \"operator\": \"=\",\n        \"operandRight\": \"{{ASSET_ID}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CONSUMER_MANAGEMENT_URL}}/v2/contractdefinitions",
					"host": [
						"{{CONSUMER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"contractdefinitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Contract Definitiions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var expectedId = \"300003\";\r",
							"pm.test(\"Recored is matched with expcedId : \"+expectedId, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    let status = false;\r",
							"    jsonData.forEach((item) => {\r",
							"        if (item[\"@id\"] == expectedId) {\r",
							"            // Check if the item has the expected @id\r",
							"            pm.expect(item[\"@id\"]).to.eql(expectedId);\r",
							"            status = true;\r",
							"        }\r",
							"    });\r",
							"\r",
							"    // If status is still false, it means no match was found\r",
							"    if (!status) {\r",
							"        pm.expect.fail('Failed : No any record matched with expectedId : '+expectedId);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/contractdefinitions/request",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"contractdefinitions",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Catalog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var expectedId = \"100003\";\r",
							"pm.test(\"Query Catalog asset recored is matched with expcedId : \"+expectedId, function () {\r",
							"\r",
							"    var status = false;\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    jsonData[\"dcat:dataset\"].map((item)=>{\r",
							"        if(item[\"@id\"] == expectedId){\r",
							"            status = true;\r",
							"            pm.expect(item[\"@id\"]).to.eql(expectedId);\r",
							"        }\r",
							"    })\r",
							"\r",
							"    if(!status){\r",
							"    pm.expect.fail('Failed : No any record matched with expectedId : '+expectedId);\r",
							"    }\r",
							"   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"@context\": {\r\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\"\r\n    },\r\n    \"@type\": \"CatalogRequest\",\r\n    \"counterPartyAddress\":\"{{PROVIDER_PROTOCOL_URL}}\",\r\n    \"protocol\": \"dataspace-protocol-http\",\r\n    \"querySpec\": {\r\n        \"offset\": 0,\r\n        \"limit\": 50\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CONSUMER_MANAGEMENT_URL}}/v2/catalog/request",
					"host": [
						"{{CONSUMER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"catalog",
						"request"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "password",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Api-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CONSUMER_MANAGEMENT_URL",
			"value": "http://localhost/bob/management"
		},
		{
			"key": "PROVIDER_PROTOCOL_URL",
			"value": "http://alice-controlplane:8084/api/v1/dsp"
		},
		{
			"key": "PROVIDER_MANAGEMENT_URL",
			"value": "http://localhost/alice/management"
		},
		{
			"key": "ASSET_ID",
			"value": "100003",
			"type": "default"
		},
		{
			"key": "POLICY_ID",
			"value": "200003",
			"type": "default"
		},
		{
			"key": "CONTRACT_POLICY_ID",
			"value": "200003",
			"type": "default"
		},
		{
			"key": "ACCESS_POLICY_ID",
			"value": "200003",
			"type": "default"
		},
		{
			"key": "CONTRACT_DEFINITION_ID",
			"value": "300003",
			"type": "default"
		},
		{
			"key": "POLICY_BPN",
			"value": "BPNL000000000002",
			"type": "default"
		},
		{
			"key": "BACKEND_SERVICE",
			"value": "https://ene5zfqvkbqvv.x.pipedream.net/",
			"type": "string"
		},
		{
			"key": "PROVIDER_ID",
			"value": "BPNL000000000001",
			"type": "string"
		},
		{
			"key": "EDC_NAMESPACE",
			"value": "https://w3id.org/edc/v0.0.1/ns/",
			"type": "string"
		}
	]
}