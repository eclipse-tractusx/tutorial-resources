{
	"info": {
		"_postman_id": "fcffd254-e40a-4c7d-b9fb-d7ea516b7d75",
		"name": "tractusx-edc-mgmt-api-final-with-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31550443"
	},
	"item": [
		{
			"name": "Create Asset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Asset Created\", function () {",
							"    var jsonData = pm.response.json();",
							"    var expectedId = pm.variables.get(\"ASSET_ID\");",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {},\n  \"@id\": \"{{ASSET_ID}}\",\n  \"properties\": {\n    \"description\": \"Product EDC Demo Asset\"\n  },\n  \"dataAddress\": {\n    \"@type\": \"DataAddress\",\n    \"type\": \"HttpData\",\n    \"baseUrl\": \"https://jsonplaceholder.typicode.com/todos\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v3/assets",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v3",
						"assets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Assets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body String Match Test\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    responseData.forEach(function (asset) {\r",
							"        pm.expect(asset).to.have.property('@id');\r",
							"        pm.expect(asset).to.have.property('@type', 'Asset');\r",
							"        pm.expect(asset).to.have.property('properties').to.be.an('object');\r",
							"        pm.expect(asset.properties).to.have.property('id');\r",
							"    });\r",
							"});\r",
							"var expectedId = pm.variables.get(\"ASSET_ID\");\r",
							"pm.test(\"Expected Test Asset ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.some((item) => item[\"@id\"] == expectedId)) {\r",
							"        pm.expect(true).to.be.true;\r",
							"    } else {\r",
							"        pm.expect.fail('Failed: No record Matched With Expected Asset ID');\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v3/assets/request",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v3",
						"assets",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Policy Created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = pm.variables.get(\"POLICY_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {\n    \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n  },\n  \"@type\": \"PolicyDefinitionRequestDto\",\n  \"@id\": \"{{POLICY_ID}}\",\n  \"policy\": {\n    \"@type\": \"Policy\",\n    \"odrl:permission\": [\n      {\n        \"odrl:action\": \"USE\",\n        \"odrl:constraint\": {\n          \"@type\": \"LogicalConstraint\",\n          \"odrl:or\": [\n            {\n              \"@type\": \"Constraint\",\n              \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n              \"odrl:operator\": {\n                \"@id\": \"odrl:eq\"\n              },\n              \"odrl:rightOperand\": \"{{PROVIDER_POLICY_BPN}}\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/policydefinitions",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"policydefinitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Policies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body String Match Test\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    responseData.forEach(function (policy) {\r",
							"        pm.expect(policy).to.have.property('@id');\r",
							"        pm.expect(policy).to.have.property('@type', 'PolicyDefinition');\r",
							"        pm.expect(policy).to.have.property('createdAt')\r",
							"    });\r",
							"});\r",
							"var expectedId = pm.variables.get(\"POLICY_ID\");\r",
							"pm.test(\"Expected Test Policy ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (!jsonData.some((item) => item[\"@id\"] == expectedId)) {\r",
							"        pm.expect.fail('Failed: No Record Matched With Expected ID');\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/policydefinitions/request",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"policydefinitions",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Contract Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Contract Definition Created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = pm.variables.get(\"CONTRACT_DEFINITION_ID\");\r",
							"    pm.expect(jsonData[\"@id\"]).to.eql(expectedId)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@context\": {},\n  \"@id\": \"{{CONTRACT_DEFINITION_ID}}\",\n  \"@type\": \"ContractDefinition\",\n  \"accessPolicyId\": \"{{POLICY_ID}}\",\n  \"contractPolicyId\": \"{{POLICY_ID}}\",\n  \"assetsSelector\": {\n    \"@type\": \"CriterionDto\",\n    \"operandLeft\": \"{{EDC_NAMESPACE}}id\",\n    \"operator\": \"=\",\n    \"operandRight\": \"{{ASSET_ID}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/contractdefinitions",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"contractdefinitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Contract Definitiions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body String Match Test\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    responseData.forEach(function (contract) {\r",
							"        pm.expect(contract).to.have.property('@id');\r",
							"        pm.expect(contract).to.have.property('@type', 'ContractDefinition');\r",
							"        pm.expect(contract).to.have.property('accessPolicyId');\r",
							"        pm.expect(contract).to.have.property('contractPolicyId')\r",
							"    });\r",
							"});\r",
							"var expectedId = pm.variables.get(\"CONTRACT_DEFINITION_ID\");\r",
							"pm.test(\"Expected Test Contract ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"  if (!jsonData.some((item) => item[\"@id\"] == expectedId)) {\r",
							"        pm.expect.fail('Failed: No Record Matched With Expected ID');\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{PROVIDER_MANAGEMENT_URL}}/v2/contractdefinitions/request",
					"host": [
						"{{PROVIDER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"contractdefinitions",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Catalog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Body String Match Test\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    responseData['dcat:dataset'].forEach(function (catalog) {\r",
							"        pm.expect(catalog).to.have.property('@id');\r",
							"        pm.expect(catalog).to.have.property('@type');\r",
							"    });\r",
							"});\r",
							"var expectedId = pm.variables.get(\"ASSET_ID\");\r",
							"pm.test(\"Expected Test Asset ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (!jsonData['dcat:dataset'].some(item => item['@id'] == expectedId)) {\r",
							"        pm.expect.fail('Failed: No Record Matched With Expected ID');\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"@context\": {\r\n    \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\"\r\n  },\r\n  \"@type\": \"CatalogRequest\",\r\n  \"counterPartyAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\r\n  \"protocol\": \"dataspace-protocol-http\",\r\n  \"querySpec\": {\r\n    \"offset\": 0,\r\n    \"limit\": 50\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CONSUMER_MANAGEMENT_URL}}/v2/catalog/request",
					"host": [
						"{{CONSUMER_MANAGEMENT_URL}}"
					],
					"path": [
						"v2",
						"catalog",
						"request"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "password",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Api-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CONSUMER_MANAGEMENT_URL",
			"value": "http://localhost/bob/management"
		},
		{
			"key": "PROVIDER_PROTOCOL_URL",
			"value": "http://alice-controlplane:8084/api/v1/dsp"
		},
		{
			"key": "PROVIDER_MANAGEMENT_URL",
			"value": "http://localhost/alice/management"
		},
		{
			"key": "ASSET_ID",
			"value": "100004",
			"type": "default"
		},
		{
			"key": "POLICY_ID",
			"value": "200004",
			"type": "default"
		},
		{
			"key": "CONTRACT_DEFINITION_ID",
			"value": "300006",
			"type": "default"
		},
		{
			"key": "PROVIDER_POLICY_BPN",
			"value": "BPNL000000000002",
			"type": "default"
		},
		{
			"key": "PROVIDER_ID",
			"value": "BPNL000000000001",
			"type": "string"
		},
		{
			"key": "EDC_NAMESPACE",
			"value": "https://w3id.org/edc/v0.0.1/ns/",
			"type": "string"
		}
	]
}